#Использовать tokenizer

Перем Шаблоны;

#Область ПрограммныйИнтерфейс

Процедура ИзФайла(ИмяФайла) Экспорт
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла);
	Текст = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	ИзТекста(Текст);
	
КонецПроцедуры

Процедура ИзТекста(Текст) Экспорт
	
	Если Шаблоны <> Неопределено Тогда
		Шаблоны.ПодчиненныеЭлементы().Очистить();
	КонецЕсли;
	
	Токенайзер = Токенайзер();
	Токенайзер.Инит(Текст);
	
	Если НЕ Токенайзер.ЕстьЕщеТокены() Тогда
		Возврат;
	КонецЕсли;
	
	Токенайзер.СледующийТокен(); // Ожидается {1, или {0,
	
	ТекущаяПозиция = Шаблоны;
	КореньПрочитан = Ложь;
	
	Пока Токенайзер.ЕстьЕщеТокены() Цикл
		
		Токен = Токенайзер.СледующийТокен();
		
		Если Токен.ТипТокена() = "НачалоЭлемента" Тогда
			
			Токенайзер.СледующийТокен(); // {
			
			Название = ТекстВСвойство(Токенайзер.СледующийТокен().Значение());
			ЭтоГруппа = Токенайзер.СледующийТокен().Значение() = "1";
			ВключатьВКонтекстноеМеню = Токенайзер.СледующийТокен().Значение() = "1";
			Автозамена = ТекстВСвойство(Токенайзер.СледующийТокен().Значение());
			Текст = ТекстВСвойство(Токенайзер.СледующийТокен().Значение());
			
			Токенайзер.СледующийТокен(); // }
			
			Если КореньПрочитан = Ложь Тогда
				ТекущаяПозиция.УстановитьНазвание(Название);
				КореньПрочитан = Истина;
			Иначе
				Если ЭтоГруппа Тогда
					ТекущаяПозиция = ДобавитьГруппу(ТекущаяПозиция).УстановитьНазвание(Название);
				Иначе
					ТекущаяПозиция = ДобавитьЭлемент(ТекущаяПозиция).УстановитьНазвание(Название)
						.УстановитьВключатьВКонтекстноеМеню(ВключатьВКонтекстноеМеню)
						.УстановитьТекстАвтозамены(Автозамена)
						.УстановитьТекстШаблона(Текст);
					
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Токен.ТипТокена() = "Конец" Тогда
			Если ТекущаяПозиция = Неопределено Тогда
				// Достигнут конец файла
				Прервать;
			Иначе
				ТекущаяПозиция = ТекущаяПозиция.Родитель();
			КонецЕсли;
		Иначе
			// Обработка не требуется
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция вТекст() Экспорт
	
	Текст = Новый Массив;
	Текст.Добавить("{1,");
	
	Элементы = Новый Массив;
	Элементы.Добавить(Шаблоны);
	
	ЗаписатьЭлементы(Элементы, Текст);
	
	Текст.Добавить("}");
	Возврат СтрСоединить(Текст, Символы.ПС);
	
КонецФункции

Функция НайтиЭлемент(ПолноеНазвание) Экспорт
	
	МассивНазваний = РазделитьПолноеНазвание(ПолноеНазвание);
	
	Если МассивНазваний.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НайденныйЭлемент = Шаблоны;
	
	Для Каждого ИскомоеНазвание Из МассивНазваний Цикл
		
		Найдено = Ложь;
		
		Для Каждого Элемент Из НайденныйЭлемент.ПодчиненныеЭлементы() Цикл
			Если ВРег(Элемент.Название()) = ВРег(ИскомоеНазвание) Тогда
				НайденныйЭлемент = Элемент;
				Найдено = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Найдено Тогда
			НайденныйЭлемент = Неопределено;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденныйЭлемент;
	
КонецФункции

Функция ДобавитьЭлемент(Знач Родитель) Экспорт
	
	Если Родитель = Неопределено Тогда
		Родитель = Шаблоны;
	КонецЕсли;
	
	Возврат Добавить(Родитель, Ложь);
	
КонецФункции

Функция ДобавитьЭлементПоПути(ПолноеНазвание) Экспорт

	Возврат ДобавитьПоПути(ПолноеНазвание, Ложь);

КонецФункции

Функция ДобавитьГруппуПоПути(ПолноеНазвание) Экспорт

	Возврат ДобавитьПоПути(ПолноеНазвание, Истина);

КонецФункции

Функция ДобавитьГруппу(Знач Родитель) Экспорт
	
	Если Родитель = Неопределено Тогда
		Родитель = Шаблоны;
	КонецЕсли;
	
	Возврат Добавить(Родитель, Истина);
	
КонецФункции

Процедура Удалить(Элемент) Экспорт
	
	Если Элемент = Неопределено Тогда
		ВызватьИсключение "Элемент не выбран";
	КонецЕсли;
	
	ИндексЭлемента = Элемент.Родитель().ПодчиненныеЭлементы().Найти(Элемент);
	
	Если ИндексЭлемента <> Неопределено Тогда
		Элемент.Родитель().ПодчиненныеЭлементы().Удалить(ИндексЭлемента);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПриСозданииОбъекта(Название = "Новый шаблон")
	
	Шаблоны = ДобавитьГруппу(Неопределено).УстановитьНазвание(Название);
	
КонецПроцедуры

Функция ЭлементШаблонаВТекст(ЭлементШаблона)
	
	Шаблон = """%1"",%2,%3,""%4"",""%5""";
	
	Если ЭлементШаблона.ЭтоГруппа() Тогда
		Возврат СтрШаблон(
			Шаблон,
			СвойствоВТекст(ЭлементШаблона.Название()),
			"1",
			"0",
			"",
			""
		);
		
	Иначе
		Возврат СтрШаблон(
			Шаблон,
			СвойствоВТекст(ЭлементШаблона.Название()),
			"0",
			?(ЭлементШаблона.ВключатьВКонтекстноеМеню(), 1, 0),
			СвойствоВТекст(ЭлементШаблона.ТекстАвтозамены()),
			СвойствоВТекст(ЭлементШаблона.ТекстШаблона())
		);
		
	КонецЕсли;
	
КонецФункции

Функция ТекстВСвойство(Текст)
	Возврат СтрЗаменить(Сред(Текст, 2, СтрДлина(Текст) - 2), """""", """");
КонецФункции

Функция СвойствоВТекст(Свойство)
	Возврат СтрЗаменить(Свойство, """", """""");
КонецФункции

Процедура ЗаписатьЭлементы(Элементы, Текст)
	
	Если Элементы.Количество() > 0 Тогда
		ПоследнийЭлемент = Элементы[Элементы.Количество() - 1];
	Иначе
		ПоследнийЭлемент = Неопределено;
	КонецЕсли;
	
	Для Каждого Элемент Из Элементы Цикл
		Если Элемент.ЭтоГруппа() Тогда
			КоличествоПодчиненных = Элемент.ПодчиненныеЭлементы().Количество();
		Иначе
			КоличествоПодчиненных = 0;
		КонецЕсли;
		
		Текст.Добавить(СтрШаблон("{%1,", Формат(КоличествоПодчиненных, "ЧН=; ЧГ=")));
		Если КоличествоПодчиненных > 0 Тогда
			Текст.Добавить(СтрШаблон("{%1},", ЭлементШаблонаВТекст(Элемент)));
			ЗаписатьЭлементы(Элемент.ПодчиненныеЭлементы(), Текст);
		Иначе
			Текст.Добавить(СтрШаблон("{%1}", ЭлементШаблонаВТекст(Элемент)));
		КонецЕсли;
		
		Если Элемент = ПоследнийЭлемент Тогда
			Текст.Добавить("}");
		Иначе
			Текст.Добавить("},");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция Токенайзер()
	
	Спецификация = Новый Массив();
	Спецификация.Добавить(Новый СпецификацияТокенПробелы(Истина));
	Спецификация.Добавить(Новый СпецификацияТокенСимвол(Символы.ПС, Неопределено));
	Спецификация.Добавить(Новый СпецификацияТокенСимвол(",", Неопределено));
	РегулярноеВыражениеНачалоЭлемента = Новый РегулярноеВыражение("{\d*,");
	Спецификация.Добавить(Новый СпецификацияТокенРегулярноеВыражение(РегулярноеВыражениеНачалоЭлемента, "НачалоЭлемента"));
	Спецификация.Добавить(Новый СпецификацияТокенСтрока());
	Спецификация.Добавить(Новый СпецификацияТокенЧисло());
	Спецификация.Добавить(Новый СпецификацияТокенСимвол("{", "Начало"));
	Спецификация.Добавить(Новый СпецификацияТокенСимвол("}", "Конец"));
	
	Возврат Новый Токенайзер(Спецификация);
	
КонецФункции

Функция РазделитьПолноеНазвание(Знач ПолноеНазвание)
	
	Пока Лев(ПолноеНазвание, 1) = "/" Цикл
		ПолноеНазвание = Сред(ПолноеНазвание, 2);
	КонецЦикла;
	
	Пока Прав(ПолноеНазвание, 1) = "/" И Прав(ПолноеНазвание, 2) <> "\/" Цикл
		ПолноеНазвание = Лев(ПолноеНазвание, СтрДлина(ПолноеНазвание) - 1);
	КонецЦикла;
	
	РегулярноеВыражение = Новый РегулярноеВыражение("^\/|[^\\]\/");
	Совпадения = РегулярноеВыражение.НайтиСовпадения(ПолноеНазвание);
	
	ТекущийИндекс = 1;
	МассивНазваний = Новый Массив;
	
	Для Каждого Совпадение Из Совпадения Цикл
		
		ДлинаСтроки = Совпадение.Индекс + Совпадение.Длина - ТекущийИндекс;
		Если ДлинаСтроки = 0 Тогда
			Значение = "";
		Иначе
			Значение = Сред(ПолноеНазвание, ТекущийИндекс, Совпадение.Индекс + Совпадение.Длина - ТекущийИндекс);
			Значение = СтрЗаменить(Значение, "\/", "/");
		КонецЕсли;
		
		МассивНазваний.Добавить(Значение);
		
		ТекущийИндекс = Совпадение.Индекс + Совпадение.Длина + 1;
		
	КонецЦикла;
	
	Если ТекущийИндекс <= СтрДлина(ПолноеНазвание) Тогда
		Значение = Сред(ПолноеНазвание, ТекущийИндекс);
		МассивНазваний.Добавить(Значение);
	КонецЕсли;
	
	Возврат МассивНазваний;
	
КонецФункции

Функция Добавить(Родитель, ЭтоГруппа)
	
	Возврат Новый ЭлементШаблонаТекста(Родитель, , ЭтоГруппа);
	
КонецФункции

Функция ДобавитьПоПути(ПолноеНазвание, ЭтоГруппа)
	
	НайденныйЭлемент = НайтиЭлемент(ПолноеНазвание);
	
	Если НайденныйЭлемент = Неопределено Тогда
		МассивНазваний = РазделитьПолноеНазвание(ПолноеНазвание);
		ТекущийПуть = "";
		ТекущийРодитель = Шаблоны;
		Для Индекс = 0 По МассивНазваний.ВГраница() Цикл
			Название = МассивНазваний[Индекс];
			ТекущийПуть = ТекущийПуть + ?(ПустаяСтрока(ТекущийПуть), "", "/") + Название;
			НайденныйЭлемент = НайтиЭлемент(ТекущийПуть);
			Если НайденныйЭлемент = Неопределено Тогда
				Если Индекс = МассивНазваний.ВГраница() Тогда
					ТекущийРодитель = Добавить(ТекущийРодитель, ЭтоГруппа).УстановитьНазвание(Название);
				Иначе
					ТекущийРодитель = Добавить(ТекущийРодитель, Истина).УстановитьНазвание(Название);
				КонецЕсли;
			Иначе
				ТекущийРодитель = НайденныйЭлемент;
			КонецЕсли;
		КонецЦикла;
		
		Возврат ТекущийРодитель;
	Иначе
		ВызватьИсключение СтрШаблон("Элемент ""%1"" уже существует", ПолноеНазвание);
	КонецЕсли;
	
КонецФункции

#КонецОбласти